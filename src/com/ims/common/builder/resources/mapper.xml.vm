<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- $!{tableDto.comment}[${tableDto.name}]SQLMapper自动映射 -->
<!--  注意:此文件由系统平台自动生成-禁止手工修改 $!sysdate -->
<mapper namespace="${package}.${className}Mapper">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" #if(${tableDto.autoincrementPkName})useGeneratedKeys="true" keyProperty="${tableDto.autoincrementPkName}"#end parameterType="${package_base}.po.${className}PO">
		INSERT INTO ${tableDto.name} 
		<trim prefix="(" suffix=")" suffixOverrides=",">
#foreach($columnDto in $columnDtos)
#if(${columnDto.isPkey} == "false")
#if(${columnDto.jdbctype} == 'VARCHAR')
		<if test="${columnDto.name} != null and ${columnDto.name} != ''">
#else
		<if test="${columnDto.name} != null">
#end
	         ${columnDto.name}, <!-- ${columnDto.comment} -->
		</if>
#end
#end
##这个动态插入映射语句的主键字段只能放在最末尾
## 如果不是以自增列做为主键
#if(!${tableDto.autoincrementPkName})
#foreach($columnDto in $pkeyColumnDtos)
#if(${columnDto.jdbctype} == 'VARCHAR')
		<if test="${columnDto.name} != null and ${columnDto.name} != ''">
#else
		<if test="${columnDto.name} != null">
#end
	          ${columnDto.name}#if($velocityCount != $pkeyColumnDtos.size()),#end  <!-- ${columnDto.comment} -->
	    </if>
#end
#end
        </trim>
	    <trim prefix="VALUES (" suffix=")" suffixOverrides="," >
#foreach($columnDto in $columnDtos)
#if(${columnDto.isPkey} == "false")
#if(${columnDto.jdbctype} == 'VARCHAR')
		<if test="${columnDto.name} != null and ${columnDto.name} != ''">
#else
		<if test="${columnDto.name} != null">
#end
	          #{${columnDto.name}, jdbcType=${columnDto.jdbctype}}, <!-- ${columnDto.comment} -->
	    </if>
#end
#end
## 如果不是以自增列做为主键
#if(!${tableDto.autoincrementPkName})
#foreach($columnDto in $pkeyColumnDtos)
#if(${columnDto.jdbctype} == 'VARCHAR')
		<if test="${columnDto.name} != null and ${columnDto.name} != ''">
#else
		<if test="${columnDto.name} != null">
#end
		     #{${columnDto.name}, jdbcType=${columnDto.jdbctype}}#if($velocityCount != $pkeyColumnDtos.size()),#end  <!-- ${columnDto.comment} -->
	    </if>
#end
#end
		</trim>
		
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" #if(${tableDto.autoincrementPkName})useGeneratedKeys="true" keyProperty="${tableDto.autoincrementPkName}"#end parameterType="${package_base}.po.${className}PO">
		INSERT INTO ${tableDto.name} (
#if(!${tableDto.autoincrementPkName})
#foreach($columnDto in $pkeyColumnDtos)
          ${columnDto.name},  <!-- ${columnDto.comment} -->
#end
#end
#foreach($columnDto in $columnDtos)
#if(${columnDto.isPkey} == "false")
		  ${columnDto.name}#if($velocityCount != $columnDtos.size()),#end  <!-- ${columnDto.comment} -->
#end
#end
		)
		VALUES (
#if(!${tableDto.autoincrementPkName})
#foreach($columnDto in $pkeyColumnDtos)
            #{${columnDto.name}, jdbcType=${columnDto.jdbctype}},   <!-- ${columnDto.comment} -->
#end 
#end
#foreach($columnDto in $columnDtos)
#if(${columnDto.isPkey} == "false")
		    #{${columnDto.name}, jdbcType=${columnDto.jdbctype}}#if($velocityCount != $columnDtos.size()),#end  <!-- ${columnDto.comment} -->
#end
#end
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="${package_base}.po.${className}PO">
		UPDATE ${tableDto.name}
		<set>
#foreach($columnDto in $columnDtos)
#if(${columnDto.isPkey} == "false")
			<if test="${columnDto.name} != null">
		          ${columnDto.name} = #{${columnDto.name}, jdbcType=${columnDto.jdbctype}},  <!-- ${columnDto.comment} -->
			</if>
#end
#end
		</set>
		WHERE ${bykeywhere}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM ${tableDto.name} WHERE ${bykeywhere}
	</delete>
	
	<!-- 批量根据主键删除数据持久化对象 -->
	<delete id="batchDeleteByKey"  parameterType="java.lang.String">
		DELETE FROM ${tableDto.name} WHERE ${bykeyParam} IN 
		<foreach item="${bykeyParam}" index="index" collection="list" separator="," open="(" close=")">
		#{${bykeyParam}}
	    </foreach>
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="${package_base}.po.${className}PO">
		SELECT
		<include refid="column" />
		FROM ${tableDto.name} WHERE ${bykeywhere}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="${package_base}.po.${className}PO">
		SELECT
		    <include refid="column" />
		FROM ${tableDto.name}
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="${package_base}.po.${className}PO">
		SELECT
			<include refid="column" />	
		FROM ${tableDto.name}
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="${package_base}.po.${className}PO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM ${tableDto.name}
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="${package_base}.po.${className}PO">
		SELECT
			<include refid="column" />	
		FROM ${tableDto.name}
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="${package_base}.po.${className}PO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM ${tableDto.name}
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS rows_ FROM ${tableDto.name}
		<where>
		    <include refid="equal" />
		</where>
	</select>
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM ${tableDto.name}
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	
	<!-- 表字段 -->
	<sql id="column">
#foreach($columnDto in $columnDtos)
		  ${columnDto.name}#if($velocityCount != $columnDtos.size()),#end  <!-- ${columnDto.comment} -->
#end
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
#foreach($columnDto in $columnDtos)
		  ${tableDto.name}.${columnDto.name}#if($velocityCount != $columnDtos.size()),#end  <!-- ${columnDto.comment} -->
#end
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
#foreach($columnDto in $columnDtos)
##只对VARCHAR类型使用非空字符串测试
#if(${columnDto.jdbctype} == "VARCHAR")	
	    <if test="${columnDto.name} != null and ${columnDto.name} != ''">
#else
	   <if test="${columnDto.name} != null ">
#end
		      AND ${columnDto.name} = #{${columnDto.name}}  <!-- ${columnDto.comment} -->
		</if>
#end
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
#foreach($columnDto in $columnDtos)
##只对VARCHAR类型使用非空字符串测试
#if(${columnDto.jdbctype} == "VARCHAR")	
	    <if test="${columnDto.name} != null and ${columnDto.name} != ''">
		      AND ${columnDto.name} LIKE '%${${columnDto.name}}%'  <!-- ${columnDto.comment} -->
		</if>
#end
#end
	</sql>
	
</mapper>