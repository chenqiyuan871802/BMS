<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 返回意见[bis_opinion]SQLMapper自动映射 -->
<!--  注意:此文件由系统平台自动生成-禁止手工修改 2017-06-17 11:27:21 -->
<mapper namespace="com.beauty.common.mapper.OpinionMapper">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="com.beauty.common.po.OpinionPO">
		INSERT INTO bis_opinion 
		<trim prefix="(" suffix=")" suffixOverrides=",">
		<if test="custom_user_id != null and custom_user_id != ''">
	         custom_user_id, <!-- custom_user_id -->
		</if>
		<if test="content != null and content != ''">
	         content, <!-- content -->
		</if>
		<if test="create_time != null and create_time != ''">
	         create_time, <!-- create_time -->
		</if>
		<if test="opinion_id != null and opinion_id != ''">
	          opinion_id  <!-- opinion_id -->
	    </if>
        </trim>
	    <trim prefix="VALUES (" suffix=")" suffixOverrides="," >
		<if test="custom_user_id != null and custom_user_id != ''">
	          #{custom_user_id, jdbcType=VARCHAR}, <!-- custom_user_id -->
	    </if>
		<if test="content != null and content != ''">
	          #{content, jdbcType=VARCHAR}, <!-- content -->
	    </if>
		<if test="create_time != null and create_time != ''">
	          #{create_time, jdbcType=VARCHAR}, <!-- create_time -->
	    </if>
		<if test="opinion_id != null and opinion_id != ''">
		     #{opinion_id, jdbcType=VARCHAR}  <!-- opinion_id -->
	    </if>
		</trim>
		
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="com.beauty.common.po.OpinionPO">
		INSERT INTO bis_opinion (
          opinion_id,  <!-- opinion_id -->
		  custom_user_id,  <!-- custom_user_id -->
		  content,  <!-- content -->
		  create_time  <!-- create_time -->
		)
		VALUES (
            #{opinion_id, jdbcType=VARCHAR},   <!-- opinion_id -->
		    #{custom_user_id, jdbcType=VARCHAR},  <!-- custom_user_id -->
		    #{content, jdbcType=VARCHAR},  <!-- content -->
		    #{create_time, jdbcType=VARCHAR}  <!-- create_time -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="com.beauty.common.po.OpinionPO">
		UPDATE bis_opinion
		<set>
			<if test="custom_user_id != null">
		          custom_user_id = #{custom_user_id, jdbcType=VARCHAR},  <!-- custom_user_id -->
			</if>
			<if test="content != null">
		          content = #{content, jdbcType=VARCHAR},  <!-- content -->
			</if>
			<if test="create_time != null">
		          create_time = #{create_time, jdbcType=VARCHAR},  <!-- create_time -->
			</if>
		</set>
		WHERE  opinion_id = #{opinion_id}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM bis_opinion WHERE  opinion_id = #{opinion_id}
	</delete>
	
	<!-- 批量根据主键删除数据持久化对象 -->
	<delete id="batchDeleteByKey"  parameterType="java.lang.String">
		DELETE FROM bis_opinion WHERE opinion_id IN 
		<foreach item="opinion_id" index="index" collection="list" separator="," open="(" close=")">
		#{opinion_id}
	    </foreach>
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="com.beauty.common.po.OpinionPO">
		SELECT
		<include refid="column" />
		FROM bis_opinion WHERE  opinion_id = #{opinion_id}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="com.beauty.common.po.OpinionPO">
		SELECT
		    <include refid="column" />
		FROM bis_opinion
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="com.beauty.common.po.OpinionPO">
		SELECT
			<include refid="column" />	
		FROM bis_opinion
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="com.beauty.common.po.OpinionPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM bis_opinion
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="com.beauty.common.po.OpinionPO">
		SELECT
			<include refid="column" />	
		FROM bis_opinion
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="com.beauty.common.po.OpinionPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM bis_opinion
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS rows_ FROM bis_opinion
		<where>
		    <include refid="equal" />
		</where>
	</select>
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM bis_opinion
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	
	<!-- 表字段 -->
	<sql id="column">
		  opinion_id,  <!-- opinion_id -->
		  custom_user_id,  <!-- custom_user_id -->
		  content,  <!-- content -->
		  create_time  <!-- create_time -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  bis_opinion.opinion_id,  <!-- opinion_id -->
		  bis_opinion.custom_user_id,  <!-- custom_user_id -->
		  bis_opinion.content,  <!-- content -->
		  bis_opinion.create_time  <!-- create_time -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="opinion_id != null and opinion_id != ''">
		      AND opinion_id = #{opinion_id}  <!-- opinion_id -->
		</if>
	    <if test="custom_user_id != null and custom_user_id != ''">
		      AND custom_user_id = #{custom_user_id}  <!-- custom_user_id -->
		</if>
	    <if test="content != null and content != ''">
		      AND content = #{content}  <!-- content -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time = #{create_time}  <!-- create_time -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="opinion_id != null and opinion_id != ''">
		      AND opinion_id LIKE '%${opinion_id}%'  <!-- opinion_id -->
		</if>
	    <if test="custom_user_id != null and custom_user_id != ''">
		      AND custom_user_id LIKE '%${custom_user_id}%'  <!-- custom_user_id -->
		</if>
	    <if test="content != null and content != ''">
		      AND content LIKE '%${content}%'  <!-- content -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time LIKE '%${create_time}%'  <!-- create_time -->
		</if>
	</sql>
	
</mapper>