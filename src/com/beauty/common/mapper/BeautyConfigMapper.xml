<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 美研币配置[bis_beauty_config]SQLMapper自动映射 -->
<!--  注意:此文件由系统平台自动生成-禁止手工修改 2017-07-29 08:57:02 -->
<mapper namespace="com.beauty.common.mapper.BeautyConfigMapper">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="com.beauty.common.po.BeautyConfigPO">
		INSERT INTO bis_beauty_config 
		<trim prefix="(" suffix=")" suffixOverrides=",">
		<if test="buy_num != null">
	         buy_num, <!-- 购买数量 -->
		</if>
		<if test="give_num != null">
	         give_num, <!-- 赠送数量 -->
		</if>
		<if test="is_del != null and is_del != ''">
	         is_del, <!-- 是否删除 0有效 1删除 -->
		</if>
		<if test="create_time != null and create_time != ''">
	         create_time, <!-- 创建时间 -->
		</if>
		<if test="create_user_id != null and create_user_id != ''">
	         create_user_id, <!-- 创建用户编号 -->
		</if>
		<if test="modify_time != null and modify_time != ''">
	         modify_time, <!-- 修改时间 -->
		</if>
		<if test="modify_user_id != null and modify_user_id != ''">
	         modify_user_id, <!-- 修改用户ID -->
		</if>
		<if test="remark != null and remark != ''">
	         remark, <!-- 备注 -->
		</if>
		<if test="config_id != null and config_id != ''">
	          config_id  <!-- 配置编号 -->
	    </if>
        </trim>
	    <trim prefix="VALUES (" suffix=")" suffixOverrides="," >
		<if test="buy_num != null">
	          #{buy_num, jdbcType=INTEGER}, <!-- 购买数量 -->
	    </if>
		<if test="give_num != null">
	          #{give_num, jdbcType=INTEGER}, <!-- 赠送数量 -->
	    </if>
		<if test="is_del != null and is_del != ''">
	          #{is_del, jdbcType=VARCHAR}, <!-- 是否删除 0有效 1删除 -->
	    </if>
		<if test="create_time != null and create_time != ''">
	          #{create_time, jdbcType=VARCHAR}, <!-- 创建时间 -->
	    </if>
		<if test="create_user_id != null and create_user_id != ''">
	          #{create_user_id, jdbcType=VARCHAR}, <!-- 创建用户编号 -->
	    </if>
		<if test="modify_time != null and modify_time != ''">
	          #{modify_time, jdbcType=VARCHAR}, <!-- 修改时间 -->
	    </if>
		<if test="modify_user_id != null and modify_user_id != ''">
	          #{modify_user_id, jdbcType=VARCHAR}, <!-- 修改用户ID -->
	    </if>
		<if test="remark != null and remark != ''">
	          #{remark, jdbcType=VARCHAR}, <!-- 备注 -->
	    </if>
		<if test="config_id != null and config_id != ''">
		     #{config_id, jdbcType=VARCHAR}  <!-- 配置编号 -->
	    </if>
		</trim>
		
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="com.beauty.common.po.BeautyConfigPO">
		INSERT INTO bis_beauty_config (
          config_id,  <!-- 配置编号 -->
		  buy_num,  <!-- 购买数量 -->
		  give_num,  <!-- 赠送数量 -->
		  is_del,  <!-- 是否删除 0有效 1删除 -->
		  create_time,  <!-- 创建时间 -->
		  create_user_id,  <!-- 创建用户编号 -->
		  modify_time,  <!-- 修改时间 -->
		  modify_user_id,  <!-- 修改用户ID -->
		  remark  <!-- 备注 -->
		)
		VALUES (
            #{config_id, jdbcType=VARCHAR},   <!-- 配置编号 -->
		    #{buy_num, jdbcType=INTEGER},  <!-- 购买数量 -->
		    #{give_num, jdbcType=INTEGER},  <!-- 赠送数量 -->
		    #{is_del, jdbcType=VARCHAR},  <!-- 是否删除 0有效 1删除 -->
		    #{create_time, jdbcType=VARCHAR},  <!-- 创建时间 -->
		    #{create_user_id, jdbcType=VARCHAR},  <!-- 创建用户编号 -->
		    #{modify_time, jdbcType=VARCHAR},  <!-- 修改时间 -->
		    #{modify_user_id, jdbcType=VARCHAR},  <!-- 修改用户ID -->
		    #{remark, jdbcType=VARCHAR}  <!-- 备注 -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="com.beauty.common.po.BeautyConfigPO">
		UPDATE bis_beauty_config
		<set>
			<if test="buy_num != null">
		          buy_num = #{buy_num, jdbcType=INTEGER},  <!-- 购买数量 -->
			</if>
			<if test="give_num != null">
		          give_num = #{give_num, jdbcType=INTEGER},  <!-- 赠送数量 -->
			</if>
			<if test="is_del != null">
		          is_del = #{is_del, jdbcType=VARCHAR},  <!-- 是否删除 0有效 1删除 -->
			</if>
			<if test="create_time != null">
		          create_time = #{create_time, jdbcType=VARCHAR},  <!-- 创建时间 -->
			</if>
			<if test="create_user_id != null">
		          create_user_id = #{create_user_id, jdbcType=VARCHAR},  <!-- 创建用户编号 -->
			</if>
			<if test="modify_time != null">
		          modify_time = #{modify_time, jdbcType=VARCHAR},  <!-- 修改时间 -->
			</if>
			<if test="modify_user_id != null">
		          modify_user_id = #{modify_user_id, jdbcType=VARCHAR},  <!-- 修改用户ID -->
			</if>
			<if test="remark != null">
		          remark = #{remark, jdbcType=VARCHAR},  <!-- 备注 -->
			</if>
		</set>
		WHERE  config_id = #{config_id}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM bis_beauty_config WHERE  config_id = #{config_id}
	</delete>
	
	<!-- 批量根据主键删除数据持久化对象 -->
	<delete id="batchDeleteByKey"  parameterType="java.lang.String">
		DELETE FROM bis_beauty_config WHERE config_id IN 
		<foreach item="config_id" index="index" collection="list" separator="," open="(" close=")">
		#{config_id}
	    </foreach>
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="com.beauty.common.po.BeautyConfigPO">
		SELECT
		<include refid="column" />
		FROM bis_beauty_config WHERE  config_id = #{config_id}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="com.beauty.common.po.BeautyConfigPO">
		SELECT
		    <include refid="column" />
		FROM bis_beauty_config
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="com.beauty.common.po.BeautyConfigPO">
		SELECT
			<include refid="column" />	
		FROM bis_beauty_config
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="com.beauty.common.po.BeautyConfigPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM bis_beauty_config
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="com.beauty.common.po.BeautyConfigPO">
		SELECT
			<include refid="column" />	
		FROM bis_beauty_config
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="com.beauty.common.po.BeautyConfigPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM bis_beauty_config
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS rows_ FROM bis_beauty_config
		<where>
		    <include refid="equal" />
		</where>
	</select>
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM bis_beauty_config
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	
	<!-- 表字段 -->
	<sql id="column">
		  config_id,  <!-- 配置编号 -->
		  buy_num,  <!-- 购买数量 -->
		  give_num,  <!-- 赠送数量 -->
		  is_del,  <!-- 是否删除 0有效 1删除 -->
		  create_time,  <!-- 创建时间 -->
		  create_user_id,  <!-- 创建用户编号 -->
		  modify_time,  <!-- 修改时间 -->
		  modify_user_id,  <!-- 修改用户ID -->
		  remark  <!-- 备注 -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  bis_beauty_config.config_id,  <!-- 配置编号 -->
		  bis_beauty_config.buy_num,  <!-- 购买数量 -->
		  bis_beauty_config.give_num,  <!-- 赠送数量 -->
		  bis_beauty_config.is_del,  <!-- 是否删除 0有效 1删除 -->
		  bis_beauty_config.create_time,  <!-- 创建时间 -->
		  bis_beauty_config.create_user_id,  <!-- 创建用户编号 -->
		  bis_beauty_config.modify_time,  <!-- 修改时间 -->
		  bis_beauty_config.modify_user_id,  <!-- 修改用户ID -->
		  bis_beauty_config.remark  <!-- 备注 -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="config_id != null and config_id != ''">
		      AND config_id = #{config_id}  <!-- 配置编号 -->
		</if>
	   <if test="buy_num != null ">
		      AND buy_num = #{buy_num}  <!-- 购买数量 -->
		</if>
	   <if test="give_num != null ">
		      AND give_num = #{give_num}  <!-- 赠送数量 -->
		</if>
	    <if test="is_del != null and is_del != ''">
		      AND is_del = #{is_del}  <!-- 是否删除 0有效 1删除 -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time = #{create_time}  <!-- 创建时间 -->
		</if>
	    <if test="create_user_id != null and create_user_id != ''">
		      AND create_user_id = #{create_user_id}  <!-- 创建用户编号 -->
		</if>
	    <if test="modify_time != null and modify_time != ''">
		      AND modify_time = #{modify_time}  <!-- 修改时间 -->
		</if>
	    <if test="modify_user_id != null and modify_user_id != ''">
		      AND modify_user_id = #{modify_user_id}  <!-- 修改用户ID -->
		</if>
	    <if test="remark != null and remark != ''">
		      AND remark = #{remark}  <!-- 备注 -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="config_id != null and config_id != ''">
		      AND config_id LIKE '%${config_id}%'  <!-- 配置编号 -->
		</if>
	    <if test="is_del != null and is_del != ''">
		      AND is_del LIKE '%${is_del}%'  <!-- 是否删除 0有效 1删除 -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time LIKE '%${create_time}%'  <!-- 创建时间 -->
		</if>
	    <if test="create_user_id != null and create_user_id != ''">
		      AND create_user_id LIKE '%${create_user_id}%'  <!-- 创建用户编号 -->
		</if>
	    <if test="modify_time != null and modify_time != ''">
		      AND modify_time LIKE '%${modify_time}%'  <!-- 修改时间 -->
		</if>
	    <if test="modify_user_id != null and modify_user_id != ''">
		      AND modify_user_id LIKE '%${modify_user_id}%'  <!-- 修改用户ID -->
		</if>
	    <if test="remark != null and remark != ''">
		      AND remark LIKE '%${remark}%'  <!-- 备注 -->
		</if>
	</sql>
	
</mapper>