<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
	default-lazy-init="true">

	<description>DAO组件</description>
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter" lazy-init="true">
		<description>状态过滤器</description>
		<property name="slowSqlMillis" value="3000" />
		<property name="logSlowSql" value="true" />
		<property name="mergeSql" value="true" />
	</bean>
	<bean id="readDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close" init-method="init" lazy-init="true">
		<description>只读数据库连接</description>
		<property name="driverClassName" value="${db.driver}" />
		<property name="url" value="${db.reader.url}" />
		<property name="username" value="${db.reader.username}" />
		<property name="password" value="${db.reader.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${db.initialSize}" />
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${db.maxActive}" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${db.minIdle}" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${db.maxWait}" />
		<!-- -->
		<property name="defaultReadOnly" value="true" />
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
			</list>
		</property>
		<property name="filters" value="${druid.filters}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="validationQuery" value="SELECT 1 FROM DUAL" />
		<property name="timeBetweenLogStatsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}" />
	</bean>
	<bean id="writeDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close" init-method="init" lazy-init="true">
		<description>只写数据库连接</description>
		<property name="driverClassName" value="${db.driver}" />
		<property name="url" value="${db.writer.url}" />
		<property name="username" value="${db.writer.username}" />
		<property name="password" value="${db.writer.password}" />
		<property name="initialSize" value="${db.initialSize}" />
		<property name="maxActive" value="${db.maxActive}" />
		<property name="minIdle" value="${db.minIdle}" />
		<property name="maxWait" value="${db.maxWait}" />
		<property name="defaultReadOnly" value="false" />
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
			</list>
		</property>
		<property name="filters" value="${druid.filters}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="validationQuery" value="SELECT 1 FROM DUAL" />
		<property name="timeBetweenLogStatsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}" />
		<property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}" />
	</bean>
	<bean id="dataSource" class="com.ims.common.core.aspect.ChooseDataSource" lazy-init="true">
		<description>数据源</description>
		<property name="targetDataSources">
			<map key-type="java.lang.String" value-type="javax.sql.DataSource">
				<!-- write -->
				<entry key="write" value-ref="writeDataSource" />
				<!-- read -->
				<entry key="read" value-ref="readDataSource" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="writeDataSource" />
		<property name="methodType">
			<map key-type="java.lang.String">
				<!-- read -->
				<entry key="read" value=",get,select,count,list,query,load," />
				<!-- write -->
				<entry key="write" value=",add,insert,create,update,delete,remove,batch," />
			</map>
		</property>
	</bean>
	<!-- 切面 -->
	<bean class="com.ims.common.core.aspect.DataSourceAspect" />
	<!-- 平台缺省数据源 JDBC事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 注解驱动的声明式事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 平台缺省数据源 SqlSessionFactory配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.ims.common;com.beauty" />
		<property name="mapperLocations" value="classpath*:**/*Mapper.xml" />
		<property name="configLocation" value="classpath:core/ims.dao.cfg.xml" />
	</bean>
   <!-- 扫描实体数据访问对象Mapper。!-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ims.common;com.beauty" />
		<property name="annotationClass" value="com.ims.common.core.annotation.Mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- 平台缺省数据源的SQL通用访问接口 -->
	<bean id="sqlDao" class="com.ims.common.core.dao.SqlDao">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>


</beans>